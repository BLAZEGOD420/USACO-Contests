#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <cmath>
#include <iterator>
#include <array>
using namespace std;

int N, T, fstate[101], interactions[251][2];

int valid(int start, int K) {
	int infected[101] = {0};
	int handshakes[101] = {0};
	infected[start] = 1;

	for (int t = 0; t <= 250; t++) {
		int cowx = interactions[t][0], cowy = interactions[t][1];
		
		if (cowx != cowy) {
			if (infected[cowx]) handshakes[cowx] += 1;
			if (infected[cowy]) handshakes[cowy] += 1; 
			if (handshakes[cowx] <= K && infected[cowx]) infected[cowy] = 1;
			if (handshakes[cowy] <= K && infected[cowy]) infected[cowx] = 1;
		}
	}
	
	for (int i = 1; i <= N; i++) {
		if (fstate[i] != infected[i]) return 0;
	}
	return 1;
};

int main() {
	ifstream fin ("tracing.in");
	ofstream fout ("tracing.out");

	fin >> N >> T;

	string line;

	fin >> line;
	
	for (int i = 0; i < N; i++) {
		if (line[i] == '1') fstate[i + 1] = 1;
		else fstate[i + 1] = 0;
	}
	
	for (int i = 0; i < T; i++) {
		int t, x, y;
		fin >> t >> x >> y;
		interactions[t][0] = x;
		interactions[t][1] = y;
	}

	int big = 0, small = 250, num = 0;

	for (int i = 1; i <= N; i++) {
		int good = 0;
		for (int k = 0; k <= 250; k++) {
			if (valid(i, k)) {
				good = 1;
				if (k > big) big = k;
				if (k < small) small = k;
			}
		}
		if (good) {
			num += 1;
		}
	}
	
	fout << num << " " << small << " ";
	if (big == 250) {
		fout << "Infinity" << endl;
	}
	else {
		fout << big << endl;
	}
	
}